package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"ByDishBackend/graph/model"
	"ByDishBackend/service"
	"context"
)

// AddMenu is the resolver for the addMenu field.
func (r *mutationResolver) AddMenu(ctx context.Context, input *model.AddMenuInput) (*model.MutationResponse, error) {
	code := service.AddMenu(input)
	resp := "finished!"
	return &model.MutationResponse{
		Code: &code, Message: &resp,
	}, nil
}

// AddDish is the resolver for the addDish field.
func (r *mutationResolver) AddDish(ctx context.Context, input *model.DishInput) (*model.MutationResponse, error) {
	code := service.AddDish(input)
	resp := "finished!"
	return &model.MutationResponse{
		Code: &code, Message: &resp,
	}, nil
}

// UpdateDish is the resolver for the updateDish field.
func (r *mutationResolver) UpdateDish(ctx context.Context, input *model.DishInput) (*model.MutationResponse, error) {
	code := service.UpdateDish(input)
	resp := "finished!"
	return &model.MutationResponse{
		Code: &code, Message: &resp,
	}, nil
}

// Menu is the resolver for the menu field.
func (r *queryResolver) Menu(ctx context.Context, input *model.MenuInput) (*model.Menu, error) {
	return service.FindMenu(*input.ID), nil
}

// MenuList is the resolver for the menuList field.
func (r *queryResolver) MenuList(ctx context.Context, input *model.MenuListInput) (*model.MenuListResponse, error) {
	return service.QueryMenu(input), nil
}

// Dish is the resolver for the dish field.
func (r *queryResolver) Dish(ctx context.Context, input *model.DishInput) (*model.Dish, error) {
	return service.SearchForDish(input), nil
}

// DishList is the resolver for the dishList field.
func (r *queryResolver) DishList(ctx context.Context, input *model.DishInput) (*model.DishListResponse, error) {
	return service.SearchForDishList(input), nil
}

// DishObjList is the resolver for the dishObjList field.
func (r *queryResolver) DishObjList(ctx context.Context, input []*string) ([]*model.DishObj, error) {
	return service.DishObjList(input), nil
}

// ObjList is the resolver for the objList field.
func (r *queryResolver) ObjList(ctx context.Context) ([]*model.Object, error) {
	return service.GetObjectBasicList(), nil
}

// ObjValList is the resolver for the objList field.
func (r *queryResolver) ObjValList(ctx context.Context, input *model.QueryDishObjects) ([]*model.ObjectValue, error) {
	return service.GetObjectList(input), nil
}

// CustTypeList is the resolver for the custTypeList field.
func (r *queryResolver) CustTypeList(ctx context.Context) ([]*model.TypeObject, error) {
	return service.GetTypeList(), nil
}

// CustDishList is the resolver for the custDishList field.
func (r *queryResolver) CustDishList(ctx context.Context, input *model.CustDishInput) ([]*model.TypeDishObject, error) {
	return service.GetDishesByType(input), nil
}

// CustAddMenu is the resolver for the custAddMenu field.
func (r *mutationResolver) CustAddMenu(ctx context.Context, input *model.CustAddMenuInput) (*model.MutationResponse, error) {
	return service.CustAddMenu(input), nil
}

// AddType is the resolver for the addType field.
func (r *mutationResolver) AddType(ctx context.Context, input *model.TypeInput) (*model.MutationResponse, error) {
	return service.AddType(input), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
